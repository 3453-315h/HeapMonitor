/*
 * MainFrame.java
 * 
 *
 */

package heapmonitor;

import java.awt.Component;
import java.awt.Font;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.TreeMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author rwincey
 */
public class MainFrame extends javax.swing.JFrame {

    private SocketHandler theSocketHandler = null;
    public static ExecutorService Executor;
    private final SimpleDateFormat format;
    
    private final TreeMap<Long, AllocationTuple> memoryTreeMap = new TreeMap();
    private final HashMap<Long, Trace> addressTraceMap = new HashMap<>();
    
    //private static final int MAX_WIDTH = 790;
    private static final int MAX_ROW_LENGTH = 0x80;
    private JTable memTable;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        initializeComponents();
        format = new SimpleDateFormat("MM/dd/yyyy-hh:mm:ss ");
               
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ipAddressField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        portField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        addrTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        goButton = new javax.swing.JButton();
        bucketPanel = new javax.swing.JPanel();
        memoryTableScrollPane = new javax.swing.JScrollPane();
        memoryPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        allocationScrollPane = new javax.swing.JScrollPane();
        traceScrollPane = new javax.swing.JScrollPane();
        traceTextArea = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitButton = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(990, 800));

        connectPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("IP Address:");

        ipAddressField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ipAddressField.setText("192.168.229.128");

        jLabel2.setText("Port:");

        portField.setText("7777");
        portField.setToolTipText("");

        connectButton.setText("Connect");
        connectButton.setMargin(new java.awt.Insets(2, 8, 2, 8));
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        addrTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel5.setText(" Address:");

        goButton.setText("Go");
        goButton.setMargin(new java.awt.Insets(2, 8, 2, 8));
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout connectPanelLayout = new javax.swing.GroupLayout(connectPanel);
        connectPanel.setLayout(connectPanelLayout);
        connectPanelLayout.setHorizontalGroup(
            connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ipAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(connectButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(5, 5, 5)
                .addComponent(addrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(goButton)
                .addContainerGap())
        );
        connectPanelLayout.setVerticalGroup(
            connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(connectPanelLayout.createSequentialGroup()
                        .addGroup(connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(connectButton))
                            .addGroup(connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(goButton)
                                .addComponent(jLabel5)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(connectPanelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ipAddressField)
                            .addComponent(portField)
                            .addComponent(addrTextField))))
                .addContainerGap())
        );

        bucketPanel.setPreferredSize(new java.awt.Dimension(770, 398));

        memoryTableScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        javax.swing.GroupLayout bucketPanelLayout = new javax.swing.GroupLayout(bucketPanel);
        bucketPanel.setLayout(bucketPanelLayout);
        bucketPanelLayout.setHorizontalGroup(
            bucketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bucketPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(memoryTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 755, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );
        bucketPanelLayout.setVerticalGroup(
            bucketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bucketPanelLayout.createSequentialGroup()
                .addComponent(memoryTableScrollPane)
                .addGap(2, 2, 2))
        );

        javax.swing.GroupLayout memoryPanelLayout = new javax.swing.GroupLayout(memoryPanel);
        memoryPanel.setLayout(memoryPanelLayout);
        memoryPanelLayout.setHorizontalGroup(
            memoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        memoryPanelLayout.setVerticalGroup(
            memoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 33, Short.MAX_VALUE)
        );

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Address");

        jLabel6.setFont(new java.awt.Font("FreeMono", 1, 10)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("0x8");

        jLabel7.setFont(new java.awt.Font("FreeMono", 1, 10)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("0x10");

        jLabel8.setFont(new java.awt.Font("FreeMono", 1, 10)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("0x18");

        jLabel9.setFont(new java.awt.Font("FreeMono", 1, 10)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("0x20");

        jLabel10.setFont(new java.awt.Font("FreeMono", 1, 10)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("0x28");

        jLabel11.setFont(new java.awt.Font("FreeMono", 1, 10)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("0x30");

        jLabel12.setFont(new java.awt.Font("FreeMono", 1, 10)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("0x38");

        jLabel13.setFont(new java.awt.Font("FreeMono", 1, 10)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("0x80");

        jLabel14.setFont(new java.awt.Font("FreeMono", 1, 10)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("0x78");

        jLabel15.setFont(new java.awt.Font("FreeMono", 1, 10)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("0x70");

        jLabel16.setFont(new java.awt.Font("FreeMono", 1, 10)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("0x68");

        jLabel17.setFont(new java.awt.Font("FreeMono", 1, 10)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("0x50");

        jLabel18.setFont(new java.awt.Font("FreeMono", 1, 10)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("0x48");

        jLabel19.setFont(new java.awt.Font("FreeMono", 1, 10)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("0x40");

        jLabel20.setFont(new java.awt.Font("FreeMono", 1, 10)); // NOI18N
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("0x58");

        jLabel21.setFont(new java.awt.Font("FreeMono", 1, 10)); // NOI18N
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("0x60");

        allocationScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Allocations"));
        allocationScrollPane.setPreferredSize(new java.awt.Dimension(45, 165));

        allocationScrollPane.setViewportView(allocationJList);

        traceScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Stack Trace"));

        traceTextArea.setColumns(20);
        traceTextArea.setRows(5);
        traceScrollPane.setViewportView(traceTextArea);

        fileMenu.setText("File");

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        fileMenu.add(exitButton);

        menuBar.add(fileMenu);

        jMenu2.setText("Edit");
        menuBar.add(jMenu2);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(connectPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(memoryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bucketPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(traceScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 756, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(allocationScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(connectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(memoryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bucketPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(traceScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(allocationScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        
        String ipStr = ipAddressField.getText();
        String portStr = portField.getText();
        
        connect(ipStr, portStr);
    }//GEN-LAST:event_connectButtonActionPerformed

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        String theAddressStr = addrTextField.getText().trim();
        int radix = 10;
        if( theAddressStr.contains("0x")){
            radix = 16;
            theAddressStr = theAddressStr.replace("0x", "");
        }
        
        int theAddr;
        try {
            theAddr = Integer.parseInt(theAddressStr, radix);
            loadMemoryPage(theAddr);
        } catch( NumberFormatException ex ){
            try {
                radix = 16;
                theAddr = Integer.parseInt(theAddressStr, radix);
                loadMemoryPage(theAddr);
            } catch( NumberFormatException ex1 ){
            }
        }
    }//GEN-LAST:event_goButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {            
            javax.swing.UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());            
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addrTextField;
    private final javax.swing.JList allocationJList = new javax.swing.JList();
    private javax.swing.JScrollPane allocationScrollPane;
    private javax.swing.JPanel bucketPanel;
    private javax.swing.JButton connectButton;
    private javax.swing.JPanel connectPanel;
    private javax.swing.JMenuItem exitButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton goButton;
    private javax.swing.JTextField ipAddressField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPanel memoryPanel;
    private javax.swing.JScrollPane memoryTableScrollPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextField portField;
    private javax.swing.JScrollPane traceScrollPane;
    private javax.swing.JTextArea traceTextArea;
    // End of variables declaration//GEN-END:variables

    //=======================================================================
    /**
     * 
     * @param ipStr
     * @param passedPort 
     */
    private void connect( String ipStr, String passedPort ) {
        
        if( theSocketHandler == null && ipStr != null && passedPort != null ){
            int serverPort = Integer.parseInt(passedPort);
            try {
                //Remove all allocations and clear screen
                resetGui();
                
                Socket clientSocket = new Socket(ipStr, serverPort);
                theSocketHandler = new SocketHandler(this, clientSocket);
                Executor.execute(theSocketHandler);
                
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    //=======================================================================
    /**
     *
     * @param passedHandler
     */
    public void setSocketHandler(SocketHandler passedHandler) {
        theSocketHandler = passedHandler;
    }

    //=======================================================================
    /**
     * 
     */
    private void initializeComponents() {
        
        DefaultListModel listModel = new DefaultListModel();
        allocationJList.setModel(listModel);
        allocationJList.setFont( new Font(Font.MONOSPACED, Font.PLAIN, 12 ));
        
        allocationJList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                if (evt.getClickCount() == 1) {
                    
                    AllocationTuple aTuple = (AllocationTuple)allocationJList.getSelectedValue();
                    if( aTuple != null ){
                        traceTextArea.setText( new String( aTuple.traceByteArr ));
                        traceTextArea.setCaretPosition(0);
                    }
                    
                } else if (evt.getClickCount() == 2) {
                    AllocationTuple aTuple = (AllocationTuple)allocationJList.getSelectedValue();
                    if( aTuple != null )
                        loadMemoryPage( aTuple.getMemoryAddress() );
                    
                } 
            }
        });
        
        
        //Create thread pool
        Executor = Executors.newCachedThreadPool();
        
        //Create JTable        
        memTable = new JTable();
        memTable.setShowVerticalLines(true);
        memTable.setTableHeader(null);
        memTable.setFont( new Font(Font.MONOSPACED, Font.PLAIN, 12));
       
        //Create DefaultTableModel
        DefaultTableModel aModel = new DefaultTableModel(0,2);
        memTable.setModel(aModel);
   
        //Get ColumnModel, set width and renderer
        TableColumnModel columnModel = memTable.getColumnModel();
        TableColumn aColumn = columnModel.getColumn(1);
        aColumn.setPreferredWidth(638);
        aColumn.setCellRenderer( new DefaultTableCellRenderer(){
        
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                          boolean isSelected, boolean hasFocus, int row, int column) {  
                if( value instanceof MemoryChunkLabel){
                    return (Component)value;
                } 
                return this;
            }
        
        });
        
        aColumn = columnModel.getColumn(0);
        aColumn.setCellRenderer( new DefaultTableCellRenderer(){
        
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                          boolean isSelected, boolean hasFocus, int row, int column) {                
                
                //TODO come back and chage this to longs
                JLabel thisLabel = (JLabel)super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                Long aLong = (Long) value;
                thisLabel.setText( String.format("0x%08X", aLong.intValue()));
                return this;
            }
        
        });
           
        //Set the view
        memoryTableScrollPane.setViewportView(memTable);
        
//        //Make the frame only vertically resizble
//        addComponentListener( new ComponentAdapter(){
//            @Override
//            public void componentResized( ComponentEvent e){
//                setSize( new Dimension(  MAX_WIDTH, getHeight()));
//                super.componentResized(e);
//            }
//        });
                
    }
    
    //=======================================================================
    /**
     * 
     * @param passedAddress 
     */ 
    public void loadMemoryPage( final long passedAddress ){
        
        SwingUtilities.invokeLater( new Runnable(){

            @Override
            public void run() {
                
                //Get the model and add row
                DefaultTableModel theModel = (DefaultTableModel)memTable.getModel();
                long baseaddr = (passedAddress >> 16) << 16;
                
                //Get the row count
                if( theModel.getRowCount() > 0 ){
                    
                    //Check current base against one for passed value
                    Long addr = (Long)theModel.getValueAt(0, 0);
                    if( addr != baseaddr ){
                        theModel.setRowCount(0);

                        long startAddr = baseaddr;
                        for( int i=0; i< 0x200; i++){
                            theModel.addRow(new Object[]{ startAddr, new MemoryChunkLabel(theModel, memoryTreeMap, startAddr, startAddr + MAX_ROW_LENGTH)  });
                            startAddr += 0x80;
                        }
                    }
                    
                } else {
                    
                    //Add addresses for first time
                    long startAddr = baseaddr;
                    for( int i=0; i< 0x200; i++){
                        theModel.addRow(new Object[]{ startAddr, new MemoryChunkLabel(theModel, memoryTreeMap, startAddr, startAddr + MAX_ROW_LENGTH)  });
                        startAddr += 0x80;
                    }
                    
                }
          
                //Get the difference 
                if( passedAddress != baseaddr ){
                    long diff = passedAddress - baseaddr;
                    int row = (int) Math.floor(diff/MAX_ROW_LENGTH);
                    
                    //Scroll to address
                    memTable.setRowSelectionInterval(row, row);
                    Rectangle aRect = memTable.getCellRect(row, 0, true);
                    memTable.scrollRectToVisible(aRect);
                }
                
            }
            
        });
    }

    //=======================================================================
    /**
     *
     * @param passedLong
     * @return 
     */
    public Trace getTrace( long passedLong ) {
        Trace aTrace;
        synchronized(addressTraceMap){
            aTrace = addressTraceMap.get(passedLong);
        }
        return aTrace;
    }

    //=======================================================================
    /**
     * 
     * @param stackAddress
     * @param aTrace 
     */
    public void setTrace(long stackAddress, Trace aTrace) {
        synchronized(addressTraceMap){
            addressTraceMap.put(stackAddress, aTrace);
        }
    }

    //=======================================================================
    /**
     *
     * @param passedAddress
     * @param aTuple 
     */
    public void addAllocation(long passedAddress, final AllocationTuple aTuple) {
               
        synchronized( memoryTreeMap){
            memoryTreeMap.put(passedAddress, aTuple);
        }
        
        //Add to the list        
        SwingUtilities.invokeLater( new Runnable(){

            @Override
            public void run() {
                DefaultListModel listModel = (DefaultListModel) allocationJList.getModel();
                listModel.addElement(aTuple);
            }
        });
        
        //Get the model and add row
        DefaultTableModel theModel = (DefaultTableModel)memTable.getModel();
     
        //Load initial page
        if( theModel.getRowCount() == 0 )
            loadMemoryPage(passedAddress);
        
        
        refreshIfNeeded(passedAddress);
    }

    //=======================================================================
    /**
     *
     * @param passedAddress
     */
    public void removeAllocation(long passedAddress) {
        
        synchronized( memoryTreeMap){
            final AllocationTuple aTuple = memoryTreeMap.remove(passedAddress);
            if( aTuple != null ){
                
                //Add to the list
                //Repaint if the adddress space is open
                SwingUtilities.invokeLater( new Runnable(){

                    @Override
                    public void run() {
                        DefaultListModel listModel = (DefaultListModel) allocationJList.getModel();
                        listModel.removeElement(aTuple);

                        aTuple.resetAffectedChunks();
                    }
                });
            }
        }
                
        refreshIfNeeded(passedAddress);
    }
    
    //=======================================================================
    /**
     * 
     * @param passedAddress 
     */
    public void refreshIfNeeded( final long passedAddress ){
        
        //Repaint if the adddress space is open
        SwingUtilities.invokeLater( new Runnable(){

            @Override
            public void run() {
                //Get the model and add row
                DefaultTableModel theModel = (DefaultTableModel)memTable.getModel();
                long baseaddr = (passedAddress >> 16) << 16;

                //Get the row count
                if( theModel.getRowCount() > 0 ){

                    //Check current base against one for passed value
                    Long addr = (Long) theModel.getValueAt(0, 0);
                    if( addr == baseaddr )
                        memTable.repaint();
                    
                }
                
                //Repaint
                allocationJList.repaint();
                
            }
         });
    }

    //==========================================================================
    /**
     * 
     */
    private synchronized void resetGui() {
        memoryTreeMap.clear();
        addressTraceMap.clear();
        
        DefaultListModel listModel = (DefaultListModel)allocationJList.getModel();
        listModel.clear();
        
        //Clear tree model
        DefaultTableModel theModel = (DefaultTableModel)memTable.getModel();
        theModel.setRowCount(0);     
        
        //Clear trace
        traceTextArea.setText("");
        
    }
          
   
}
